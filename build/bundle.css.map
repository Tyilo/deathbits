{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  let roundsPlayed;\n  let players;\n  let eyes;\n  let eyeSum;\n  let diceBits;\n  let outcomes;\n  let averageProbability;\n\n  class Player {\n    constructor() {\n      this.name = \"\";\n      this.bitHistory = [...Array(roundsPlayed), players.length];\n      this.scoreHistory = Array(roundsPlayed).fill(0);\n    }\n\n    get currentBit() {\n      return this.bitHistory[this.bitHistory.length - 1];\n    }\n\n    set currentBit(bit) {\n      this.bitHistory[this.bitHistory.length - 1] = bit;\n    }\n\n    get currentScore() {\n      return this.scoreHistory[this.scoreHistory.length - 1] || 0;\n    }\n  }\n\n  function sum(arr) {\n    return arr.reduce((a, b) => a + b, 0);\n  }\n\n  function getBit(n, i) {\n    return (n >> i) & 1;\n  }\n\n  function updateWidth(e) {\n    const s = e.target.value;\n    const span = document.createElement(\"span\");\n    span.textContent = s;\n    document.body.appendChild(span);\n    const width = span.offsetWidth;\n    document.body.removeChild(span);\n    e.target.style.minWidth = `${width + 30}px`;\n  }\n\n  function addPlayer() {\n    players = [...players, new Player()];\n  }\n\n  function resetGame() {\n    roundsPlayed = 0;\n    players = [];\n    eyes = [];\n    eyeSum = null;\n    diceBits = \"\";\n\n    for (let i = 0; i < 2; i++) {\n      addPlayer();\n    }\n  }\n\n  function permutations(n) {\n    if (n === 0) return [[]];\n\n    const res = [];\n    for (const p of permutations(n - 1)) {\n      for (let i = 0; i < n; i++) {\n        const p2 = [...p];\n        p2.splice(i, 0, n - 1);\n        res.push(p2);\n      }\n    }\n    return res;\n  }\n\n  function countConsecutives(arr) {\n    const res = [];\n    let prev = null;\n    for (const el of arr) {\n      if (el !== prev) {\n        res.push([0, el]);\n      }\n      res[res.length - 1][0]++;\n      prev = el;\n    }\n    return res;\n  }\n\n  function assignBits() {\n    const scores = players.map(p => p.currentScore);\n    const sortedScores = [...scores].sort();\n    const sortedOutcomes = [...outcomes].sort();\n\n    function scoreAssignment(p) {\n      const score = [];\n      for (let i = 0; i < players.length; i++) {\n        score.push(outcomes[p[i]]);\n      }\n      return score;\n    }\n\n    function cmpNumbers(n1, n2) {\n      if (n1 === n2) return 0;\n      if (n1 < n2) return -1;\n      return 1;\n    }\n\n    function cmpAssignments(p1, p2) {\n      for (let i = 0; i < players.length; i++) {\n        for (let j = i + 1; j < players.length; j++) {\n          const c1s = cmpNumbers(scores[p1[i]], scores[p2[j]]);\n          const c1o = outcomes[p1[i]] < outcomes[p2[j]];\n        }\n      }\n    }\n\n    // TODO\n    for (let i = 0; i < players.length; i++) {\n      players[i].currentBit = i;\n    }\n  }\n\n  function removePlayer(i) {\n    if (roundsPlayed && !confirm(`Remove player ${i + 1}?`)) return;\n\n    players.splice(i, 1);\n    players = players;\n\n    assignBits();\n  }\n\n  function dieSymbol(n) {\n    return String.fromCharCode(0x2680 - 1 + n);\n  }\n\n  function rollDice() {\n    eyes = [];\n    for (let i = 0; i < dice; i++) {\n      eyes.push(Math.floor(Math.random() * 6 + 1));\n    }\n    eyeSum = sum(eyes);\n    diceBits = eyeSum.toString(2).padStart(players.length, \"0\");\n\n    for (let i = 0; i < players.length; i++) {\n      let newScore = players[i].currentScore;\n      if (getBit(eyeSum, i)) {\n        newScore++;\n      }\n      players[i].scoreHistory.push(newScore);\n      players[i].bitHistory.push(null);\n    }\n\n    assignBits();\n\n    players = players;\n\n    roundsPlayed++;\n  }\n\n  const dice_sum_outcomes_cache = [[1]];\n  function dice_sum_outcomes(dice, sum) {\n    // Calculate and cache all rows up to dice\n    for (let k = dice_sum_outcomes_cache.length; k <= dice; k++) {\n      dice_sum_outcomes_cache.push(Array(k).fill(0));\n\n      for (let sum = k; sum <= 6 * k; sum++) {\n        let count = 0;\n        for (let i = 1; i <= 6; i++) {\n          const rem = sum - i;\n          if (k - 1 <= rem && rem <= 6 * (k - 1)) {\n            count += dice_sum_outcomes_cache[k - 1][rem];\n          }\n        }\n        dice_sum_outcomes_cache[k].push(count);\n      }\n    }\n\n    return dice_sum_outcomes_cache[dice][sum];\n  }\n\n  $: dice = Math.ceil(Math.pow(2, players.length - 1) / 6);\n\n  $: {\n    outcomes = [];\n\n    outcomes = Array(players.length).fill(0);\n\n    for (let sum = dice; sum <= 6 * dice; sum++) {\n      const pos = dice_sum_outcomes(dice, sum);\n      console.log(sum, pos);\n      for (let i = 0; i < players.length; i++) {\n        outcomes[i] += pos * getBit(sum, i);\n      }\n    }\n\n    averageProbability = sum(outcomes) / (players.length * Math.pow(6, dice));\n  }\n\n  resetGame();\n</script>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    margin: 0 auto;\n  }\n\n  .eyes {\n    font-size: 6em;\n    min-height: 1.25em;\n    line-height: 1.25;\n  }\n\n  .bits {\n    font-size: 3em;\n    min-height: 1.25em;\n    line-height: 1.25;\n  }\n\n  .playerName {\n    width: 100%;\n    display: table-cell;\n  }\n\n  table {\n    margin: auto;\n  }\n\n  table,\n  tr,\n  th,\n  td {\n    border: 1px solid black;\n    border-collapse: collapse;\n  }\n\n  .winner * {\n    background-color: lightgreen;\n  }\n\n  td.number {\n    min-width: 1.5em;\n  }\n\n  th {\n    padding: 0.5em;\n  }\n\n  button.big {\n    font-size: 1.5em;\n    margin: 1em;\n  }\n</style>\n\n<main>\n  <h1>Death Bits</h1>\n  <div class=\"eyes\">\n    {#if eyes.length}\n      {#each eyes as n}{dieSymbol(n)}{/each}\n    {:else}\n      {#each Array(dice) as _}&#x2610;{/each}\n    {/if}\n  </div>\n  <div class=\"bits\">\n    {#if eyeSum}\n      {#each diceBits as b}{b}{/each}\n      ({eyeSum})\n    {/if}\n  </div>\n  <button on:click={rollDice} class=\"big\">Roll</button>\n  <table>\n    <thead>\n      <tr>\n        <th colspan={roundsPlayed + 1}>Bits</th>\n        <th>Player</th>\n        {#if roundsPlayed}\n          <th colspan={roundsPlayed}>Scores</th>\n        {/if}\n        <th />\n      </tr>\n    </thead>\n    <tbody>\n      {#each players as player, i}\n        <tr class:winner={getBit(eyeSum, i)}>\n          {#each [...player.bitHistory].reverse() as bit}\n            <td class=\"number\">{bit === undefined ? '-' : bit}</td>\n          {/each}\n          <td>\n            <input\n              bind:value={player.name}\n              placeholder=\"Player {i + 1}\"\n              on:change={updateWidth}\n              on:keydown={updateWidth}\n              on:keyup={updateWidth}\n              class=\"playerName\"\n              size=\"5\" />\n          </td>\n          {#each player.scoreHistory as score}\n            <td class=\"number\">{score}</td>\n          {/each}\n          <td>\n            <button\n              on:click={() => removePlayer(i)}\n              disabled={players.length === 1}\n              type=\"checkbox\">\n              x\n            </button>\n          </td>\n        </tr>\n      {/each}\n    </tbody>\n  </table>\n  <button on:click={addPlayer} class=\"big\">Add player</button>\n  <button\n    on:click={e => {\n      if (confirm('Reset game?')) resetGame();\n    }}\n    class=\"big\">\n    Reset game\n  </button>\n  <h2>Probabilities</h2>\n  <table>\n    <thead>\n      <tr>\n        <th>Bit</th>\n        <th>Probability</th>\n      </tr>\n    </thead>\n    <tbody>\n      {#each outcomes as o, i}\n        <tr>\n          <td>{i}</td>\n          <td>\n            {#if o !== null}\n              <sup>{o}</sup>\n              &frasl;\n              <sub>{Math.pow(6, dice)}</sub>\n              &approx; {(o / Math.pow(6, dice)).toFixed(2)}\n            {:else}?{/if}\n          </td>\n        </tr>\n      {/each}\n      <tr>\n        <th>Avg.</th>\n        <td>\n          {#if averageProbability !== null}\n            {averageProbability.toFixed(2)}\n          {:else}?{/if}\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</main>\n"
  ],
  "names": [],
  "mappings": "AA4ME,IAAI,8BAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,KAAK,8BAAC,CAAC,AACL,SAAS,CAAE,GAAG,CACd,UAAU,CAAE,MAAM,CAClB,WAAW,CAAE,IAAI,AACnB,CAAC,AAED,KAAK,8BAAC,CAAC,AACL,SAAS,CAAE,GAAG,CACd,UAAU,CAAE,MAAM,CAClB,WAAW,CAAE,IAAI,AACnB,CAAC,AAED,WAAW,8BAAC,CAAC,AACX,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,UAAU,AACrB,CAAC,AAED,KAAK,8BAAC,CAAC,AACL,MAAM,CAAE,IAAI,AACd,CAAC,AAED,mCAAK,CACL,gCAAE,CACF,gCAAE,CACF,EAAE,8BAAC,CAAC,AACF,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,eAAe,CAAE,QAAQ,AAC3B,CAAC,AAED,sBAAO,CAAC,eAAE,CAAC,AACT,gBAAgB,CAAE,UAAU,AAC9B,CAAC,AAED,EAAE,OAAO,8BAAC,CAAC,AACT,SAAS,CAAE,KAAK,AAClB,CAAC,AAED,EAAE,8BAAC,CAAC,AACF,OAAO,CAAE,KAAK,AAChB,CAAC,AAED,MAAM,IAAI,8BAAC,CAAC,AACV,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,GAAG,AACb,CAAC"
}